#+TITLE: PL: Programming Languages Setups
#+PROPERTY: header-args:emacs-lisp :tangle ./pl.el

* Common Lisp
** Sly
#+begin_src emacs-lisp
  (use-package sly
    :hook (sly . ac-sly))
#+end_src

#+RESULTS:
| ac-sly |

#+begin_src emacs-lisp
  (use-package ac-sly)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package sly-asdf)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package helm-sly)
  (use-package sly-quicklisp)
  (use-package sly-repl-ansi-color)
  (use-package sly-named-readtables)
#+end_src

#+RESULTS:

* Go
:LOGBOOK:
CLOCK: [2021-12-11 Sat 23:38]--[2021-12-12 Sun 00:03] =>  0:25
:END:

#+begin_src emacs-lisp
  (use-package company-go)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package go-snippets)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package go-autocomplete)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  ;; Define function to call when go-mode loads
  (defun my-go-mode-hook ()
    (setq gofmt-command "goimports")                ; gofmt uses invokes goimports
    (if (not (string-match "go" compile-command))   ; set compile command default
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))

    ;; guru settings
    (go-guru-hl-identifier-mode)                    ; highlight identifiers

    ;; Key bindings specific to go-mode
    (local-set-key (kbd "M-.") 'godef-jump)         ; Go to definition
    (local-set-key (kbd "M-*") 'pop-tag-mark)       ; Return from whence you came
    (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler
    (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd
    (local-set-key (kbd "M-]") 'next-error)         ; Go to next error (or msg)
    (local-set-key (kbd "M-[") 'previous-error)     ; Go to previous error or msg

    ;; Misc go stuff
    (auto-complete-mode 1)

    (lambda ()
      (set (make-local-variable 'company-backends) '(company-go))
      (company-mode)))
                                          ; Enable auto-complete mode
#+end_src

#+RESULTS:
: my-go-mode-hook

#+begin_src emacs-lisp
  (use-package go-mode
    :hook ((go-mode . my-go-mode-hook)
           (before-save-hook . gofmt-before-save)) ; gofmt before every save
    :init
  ;; Ensure the go specific autocomplete is active in go-mode.
    (require 'go-autocomplete))
#+end_src

#+RESULTS:
| gofmt-before-save |

#+begin_src emacs-lisp
  (use-package golint)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package go-eldoc)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package gomacro-mode)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package go-stacktracer)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package go-fill-struct)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package helm-go-package)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package flymake-golangci)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package flycheck-gometalinter)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package flymake-go-staticcheck)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package flycheck-golangci-lint)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package go-guru)
#+end_src

#+RESULTS:

* Language translation
#+begin_src emacs-lisp
  (use-package go-translate)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package google-translate)
#+end_src

#+RESULTS:

# Oi, meu amor

* LaTeX
# <
#+begin_src emacs-lisp :tangle no
  (use-package ivy-bibtex
    :init
    (setq bibtex-completion-bibliography '("~/Bibliography/collection.bib")
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))

  (use-package org-ref
    :ensure nil
    :init
    (require 'bibtex)
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "-"
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 2
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body))
  (require 'org-ref-ivy)
  (require 'org-ref-arxiv)
  (require 'org-ref-scopus)
  (require 'org-ref-wos)


  (use-package org-ref-ivy
    :ensure nil
    :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
                org-ref-insert-cite-function 'org-ref-cite-insert-ivy
                org-ref-insert-label-function 'org-ref-insert-label-link
                org-ref-insert-ref-function 'org-ref-insert-ref-link
                org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :tangle no
(add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex --synctex=1%(mode)%' %t" TeX-run-TeX nil t))
(add-to-list 'TeX-view-program-list '("eaf" eaf-pdf-synctex-forward-view))
(add-to-list 'TeX-view-program-selection '(output-pdf "eaf"))
#+end_src

* PureScript
#+begin_src emacs-lisp
  (use-package purescript-mode
    :hook (purescript-mode . purescript-indentation))
#+end_src

#+RESULTS:
| purescript-indentation |
