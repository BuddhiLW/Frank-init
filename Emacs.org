#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome!

This is the configuration we've been building in the *Emacs From Scratch* series, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

# *NOTE:* If you run into any issues while using this configuration, please [[https://github.com/daviwil/emacs-from-scratch/issues/new][file an issue]] or send me an email at =david at systemcrafters.cc=.

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(93 . 93))

#+end_src

#+RESULTS:
: efs/frame-transparency

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Load Desktop.el and other auxiliaries
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/desktop.el")
  (load-file "~/.emacs.d/editing.el")
#+end_src

#+RESULTS:
: t

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Toggle transparency
#+begin_src emacs-lisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
		      ((numberp (cdr alpha)) (cdr alpha))
		      ;; Also handle undocumented (<active> <inactive>) form.
		      ((numberp (cadr alpha)) (cadr alpha)))
		100)
	   '(93 . 93) '(100 . 100)))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
#+end_src

#+RESULTS:
: toggle-transparency

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

    (set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)


    (defun init-my-font ()
      (set-face-font
       'default
       (font-spec
        :family "Fira Code Retina"
        :height efs/default-font-size
        :slant 'normal))
      (set-face-attribute 'default nil :height 103)
      ;; emoji font
      (set-fontset-font
       t 'symbol
       (font-spec :family "Noto Color Emoji"
                  :height efs/default-variable-font-size
                  :weight 'normal
                  :width 'normal
                  :slant 'normal))
      ;; fallback font
      (set-fontset-font
       t nil
       (font-spec
        :family "DejaVu Sans Mono"
        :height efs/default-font-size
        :slant 'normal)))

#+end_src

#+RESULTS:
: init-my-font
** Emojis and Ligatures
#+begin_src emacs-lisp
  (use-package unicode-fonts
     :ensure t
     :config
      (unicode-fonts-setup))
#+end_src
#+RESULTS:
: t

# #+begin_src emacs-lisp
  (use-package ligature
      :load-path "~/.emacs.d/personal-packages/ligature.el/"
      :config
      ;; Enable the "www" ligature in every possible major mode
      ;; (ligature-set-ligatures 't '("www"))
      ;; Enable traditional ligature support in eww-mode, if the
      ;; `variable-pitch' face supports it
      (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
      ;; Enable all Cascadia Code ligatures in programming modes
      (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                           ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                           "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                           "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                           "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                           "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                           "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                           "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                           ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                           "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                           "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                           "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                           "\\\\" "://"))
      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode f))
#+end_src


# ** Hasklig
#+begin_src emacs-lisp
  (defun my-correct-symbol-bounds (pretty-alist)
    "Prepend a TAB character to each symbol in this alist,
  this way compose-region called by prettify-symbols-mode
  will use the correct width of the symbols
  instead of the width measured by char-width."
    (mapcar (lambda (el)
              (setcdr el (string ?\t (cdr el)))
              el)
            pretty-alist))

  (defun my-ligature-list (ligatures codepoint-start)
    "Create an alist of strings to replace with
  codepoints starting from codepoint-start."
    (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
      (-zip-pair ligatures codepoints)))

                                          ; list can be found at https://github.com/i-tu/Hasklig/blob/master/GlyphOrderAndAliasDB#L1588
  (setq my-hasklig-ligatures
        (let* ((ligs '("&&" "***" "*>" "\\\\" "||" "|>" "::"
                       "==" "===" "==>" "=>" "=<<" "!!" ">>"
                       ">>=" ">>>" ">>-" ">-" "->" "-<" "-<<"
                       "<*" "<*>" "<|" "<|>" "<$>" "<>" "<-"
                       "<<" "<<<" "<+>" ".." "..." "++" "+++"
                       "/=" ":::" ">=>" "->>" "<=>" "<=<" "<->")))
          (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  ;; nice glyphs for haskell with hasklig
  (defun my-set-hasklig-ligatures ()
    "Add hasklig ligatures for use with prettify-symbols-mode."
    (setq prettify-symbols-alist
          (append my-hasklig-ligatures prettify-symbols-alist))
    (prettify-symbols-mode))

  (add-hook 'haskell-mode-hook 'my-set-hasklig-ligatures)
#+end_src

#+RESULTS:
| my-set-hasklig-ligatures |

#+begin_src emacs-lisp
  (setq my-fira-code-ligatures
    (let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
                  "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
                  "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
                  "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
                  ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
                  "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
                  "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
                  "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
                  ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
                  "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
                  "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
                  "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
                  "x" ":" "+" "+" "*")))
      (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))
#+end_src

** Emojify
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src


#+begin_src emacs-lisp
  (setq emojify-user-emojis '((":emacs:" . (("name" . "Emacs")
                                                ("image" . "~/.emacs.d/emoji/emacs.svg")
                                                ("style" . "github")))
                              (":lambda:" . (("name" . "Lambda")
                                                ("image" . "~/.emacs.d/emoji/lambda.jpg")
                                                ("style" . "github")))))
  ;; If emojify is already loaded refresh emoji data
  (when (featurep 'emojify)
    (emojify-set-emoji-data))
#+end_src

#+RESULTS:
** Pretty-symbols
#+begin_src emacs-lisp
  (use-package fira-code-mode
    :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x" "*" "**" "***" ":" "::" "www" "->" "->>" "+"))
    :hook (
           (prog-mode . prettify-symbols-mode)
           (prog-mode . fira-code-mode)
           (special-mode . prettify-symbols-mode)
           (special-mode . fira-code-mode)
           (text-mode . prettify-symbols-mode)))
  #+end_src

#+RESULTS:
** Nyan Cat Mode
#+begin_src emacs-lisp
  ;; (use-package nyan-mode
  ;;   :hook ((special-mode . nyan-mode)
  ;;          (text-mode . nyan-mode)
  ;;          (prog-mode . nyan-mode)))
#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
  (use-package general
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
  
    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))
      "h" 'shrink-window-horizontally
      "l" 'enlarge-window-horizontally))
  
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
  
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
    (delete 'mu4e evil-collection-mode-list)
    (delete 'mu4e-conversation evil-collection-mode-list))
  
  (use-package general
    :config
    (general-evil-setup t))
  
  ;; (general-create-definer dw/leader-key-def
  ;;   :keymaps '(normal insert visual emacs)
  ;;   :prefix "SPC"
  ;;   :global-prefix "C-SPC")
  
  ;;   (general-create-definer dw/ctrl-c-keys
  ;;     :prefix "C-c")
  
#+end_src

#+RESULTS:
: t

*** Evil Tutor
    #+begin_src emacs-lisp
      (use-package evil-tutor)
      #+end_src

      #+RESULTS:

* UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  
  (use-package doom-themes
    :init (load-theme 'ewal-spacemacs-classic t))
  ;;wildavil's default -> doom-paletnight
  
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           ("C-c r" . 'revert-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

#+RESULTS:
: counsel-minibuffer-history

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

#+RESULTS:
: t

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (efs/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** PDF-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-loader-install))
#+end_src

#+RESULTS:
: t
 
* Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-format-latex-options nil :inherit 'fixed-pitch)
    ;; ;
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))

#+end_src

#+RESULTS:
: efs/org-font-setup

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Monday.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Tuesday.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Wendnesday.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Thrusday.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Friday.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Saturday.org"
            "~/Projects/Code/emacs-from-scratch/OrgFiles/Sunday.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))

#+end_src

#+RESULTS:

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

# *** Inline Images
# #+begin_src emacs-lisp
#   ;; -- Display images in org mode
#   ;; enable image mode first
#   (use-package iimage-mode
#     ;; add the org file link format to the iimage mode regex
#     :init
#     (add-to-list & 'iimage-mode-image-regex-alist
#                  (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]") ))
#     ;;  add a hook so we can display images on load
#     (add-hook & 'org-mode-hook & '(lambda () (org-turn-on-iimage-in-org)))
#     ;; function to setup images for display on load
#     (defun org-turn-on-iimage-in-org ()
#       "display images in your org file"
#       (interactive)
#       (turn-on-iimage-mode)
#       (set-face-underline-p & 'org-link nil))
#     ;; function to toggle images in a org bugger
#     (defun org-toggle-iimage-in-org ()
#       "display images in your org file"
#       (interactive)
#       (if (face-underline-p & 'org-link)
#           (set-face-underline-p & 'org-link nil)
#         (set-face-underline-p & 'org-link t))
#       (call-interactively & 'iimage-mode)))

#   (define-key org-mode-map (kbd "C-S-a") & 'org-archive-subtree)
#   #+end_src

#+RESULTS:

Chosing an image's size with :width property
#+begin_example
#+ATTR_ORG: :width 100
#+end_example

#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

#+RESULTS:

** Extra packages (primerly management-related)
#+begin_src emacs-lisp
  ;; (use-package org-plus-contrib)
  #+end_src

#+begin_src emacs-lisp
(require 'ox-taskjuggler)
#+end_src

#+RESULTS:
: ox-taskjuggler
  
** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (ipython . t)
       (python . t)
       ;; (julia . t)
       (ein . t)
       (browser . t)
       (ditaa . t)
       (css . t)
       (lisp . t)
       (clojure . t)
       (clojurescript . t)))
  
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

#+RESULTS:
: ((conf-unix . conf-unix) (ein-julia . julia) (ein-r . R) (ein-R . R) (ein-python . python) (ein . python) (ipython . python) (redis . redis) (php . php) (arduino . arduino) (browser . html) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

*** Clojure(script)
#+begin_src emacs-lisp
  (require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider)
#+end_src

***  Ipython
#+begin_src emacs-lisp
(use-package ob-ipython)
#+end_src

#+RESULTS:

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
  (require 'org-tempo)
  
  ;; System
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  
  ;; Scientific
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("ju" . "src julia"))
  (add-to-list 'org-structure-template-alist '("cl" . "src clojure"))
  (add-to-list 'org-structure-template-alist '("ej" . "src ein-julia :session localhost"))
  (add-to-list 'org-structure-template-alist '("ep" . "src ein-python :session localhost"))
  
  ;; Web
  (add-to-list 'org-structure-template-alist '("c4" . "src css :tangle ../css/.css :mkdirp yes"))
  (add-to-list 'org-structure-template-alist '("js" . "src js :tangle ../js/.js"))
  (add-to-list 'org-structure-template-alist '("h4" . "src html :tangle ../html/index.html :mkdirp yes"))
  
#+end_src

#+RESULTS:
: ((ep . src ein-python :session localhost) (ej . src ein-julia :session localhost) (h4 . src html :tangle ../html/index.html :mkdirp yes) (js . src js :tangle ../js/.js) (c4 . src css :tangle ../css/.css :mkdirp yes) (cl . src clojure) (ju . src julia) (py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org-download
#+begin_src emacs-lisp
(use-package org-download)
#+end_src

#+RESULTS:

** Org-roam and Bibtex
It's a requirement, for org-roam-bibtex,  org-roam, org-ref and bibtex-completion.

#+begin_src emacs-lisp
(use-package org-roam)
#+end_src

#+begin_src emacs-lisp
(use-package org-ref)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package bibtex-utils)
  (use-package company-bibtex)
  (use-package gscholar-bibtex)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package helm-bibtex)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package org-roam-bibtex)
#+end_src

#+RESULTS:

** TaskJuggler
#+begin_src emacs-lisp
  (use-package tj3-mode)
  #+end_src

  #+RESULTS:

** Org-inline-image
   #+begin_src emacs-lisp
     ;; (use-package org-inline-image)
   #+end_src

** Org export config
   #+begin_src emacs-lisp
      ;;     (use-package org
      ;;     :init)
      ;; (eval-after-load 'ox-latex
      ;; (add-to-list 'org-export-latex-classes 'abntex2))
     
      (with-eval-after-load 'ox-latex
	(add-to-list 'org-latex-classes
		     '("abntex2"
		       "\\documentclass{abntex2}"
		       
		       ;; ("\\chapter{%s}" . "\\chapter*{%s}")
		       ("\\chapter{%s}" . "\\chapter*{%s}")
		       ("\\subsection{%(setq )}" . "\\section*{%s}")
		       ("\\subsubsection{%s}" . "\\subsection*{%s}")
     
		       )))
     
     ;; ("\\chapter{%s}" . "\\chapter*{%s}")
      ;;		      ("\\section{%s}" . "\\section*{%s}")
      ;;		      ("\\subsection{%(setq )}" . "\\subsection*{%s}")
      ;;		      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     #+end_src

     #+RESULTS:
   

* Development
** Languages

*** LaTeX
**** Reload/update-view "C-x p"
#+begin_src emacs-lisp
(defun reload-pdf ()
  (interactive
  (let* ((fname buffer-file-name)
        (fname-no-ext (substring fname 0 -4))
        (pdf-file (concat fname-no-ext ".pdf"))
        (cmd (format "pdflatex %s" fname)))
    (delete-other-windows)
    (split-window-horizontally)
    (split-window-vertically)
    (shell-command cmd)
    (other-window 2)
    (find-file pdf-file)
    (balance-windows))))

(global-set-key "\C-x\p" 'reload-pdf)
#+end_src

**** Auctex
#+begin_src emacs-lisp
  ;; to use pdfview with auctex
   (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
  
   ;; to have the buffer refresh after compilation
   (add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src

**** Preview (using org-preview)
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-x C-l") 'org-latex-preview)
#+end_src

#+RESULTS:
: org-latex-preview

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.
*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp
  
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
  
  
#+end_src

#+RESULTS:
| lsp-deferred | evil-collection-python-set-evil-shift-width | doom-modeline-env-setup-python |

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

#+RESULTS:

**** Ein and Ob-ein
#+begin_src emacs-lisp
  (use-package ein)
  ;; (use-package ob-ein)
#+end_src

#+begin_src emacs-lisp
    (defun ob-ipython-inline-image (b64-string)
      "Write the b64-string to a temporary file.
      Returns an org-link to the file."
      (let* ((tfile (make-temp-file "ob-ipython-" nil ".png"))
	     (link (format "[[file:%s]]" tfile)))
	(ob-ipython--write-base64-string tfile b64-string)
	link))
    
    
    (defun org-babel-execute:ipython (body params)
      "Execute a block of IPython code with Babel.
      This function is called by `org-babel-execute-src-block'."
      (let* ((file (cdr (assoc :file params)))
	     (session (cdr (assoc :session params)))
	     (result-type (cdr (assoc :result-type params))))
	(org-babel-ipython-initiate-session session params)
	(-when-let (ret (ob-ipython--eval
			 (ob-ipython--execute-request
			  (org-babel-expand-body:generic (encode-coding-string body 'utf-8)
							 params (org-babel-variable-assignments:python params))
			  (ob-ipython--normalize-session session))))
	  (let ((result (cdr (assoc :result ret)))
		(output (cdr (assoc :output ret))))
	    (if (eq result-type 'output)
		(concat
		 output 
		 (format "%s"
			 (mapconcat 'identity
				    (loop for res in result
					  if (eq 'image/png (car res))
					  collect (ob-ipython-inline-image (cdr res)))
				    "\n")))
	      (ob-ipython--create-stdout-buffer output)
	      (cond ((and file (string= (f-ext file) "png"))
		     (->> result (assoc 'image/png) cdr (ob-ipython--write-base64-string file)))
		    ((and file (string= (f-ext file) "svg"))
		     (->> result (assoc 'image/svg+xml) cdr (ob-ipython--write-string-to-file file)))
		    (file (error "%s is currently an unsupported file extension." (f-ext file)))
		    (t (->> result (assoc 'text/plain) cdr))))))))
    
  ;; #   (defun ob-ijulia-inline-image (b64-string)
  ;; #     "Write the b64-string to a temporary file.
  ;; #   Returns an org-link to the file."
  ;; #     (let* ((tfile (make-temp-file "ob-ijulia-" nil ".png"))
  ;; # 	   (link (format "[[file:%s]]" tfile)))
  ;; #       (ob-ijulia--write-base64-string tfile b64-string)
  ;; #       link))
    
    
  ;; #   (defun org-babel-execute:ijulia (body params)
  ;; #     "Execute a block of IJulia code with Babel.
  ;; #   This function is called by `org-babel-execute-src-block'."
  ;; #     (let* ((file (cdr (assoc :file params)))
  ;; # 	   (session (cdr (assoc :session params)))
  ;; # 	   (result-type (cdr (assoc :result-type params))))
  ;; #       (org-babel-ijulia-initiate-session session params)
  ;; #       (-when-let (ret (ob-ijulia--eval
  ;; # 		       (ob-ijulia--execute-request
  ;; # 			(org-babel-expand-body:generic (encode-coding-string body 'utf-8)
  ;; # 						       params (org-babel-variable-assignments:julia params))
  ;; # 			(ob-ijulia--normalize-session session))))
  ;; # 	(let ((result (cdr (assoc :result ret)))
  ;; # 	      (output (cdr (assoc :output ret))))
  ;; # 	  (if (eq result-type 'output)
  ;; # 	      (concat
  ;; # 	       output 
  ;; # 	       (format "%s"
  ;; # 		       (mapconcat 'identity
  ;; # 				  (loop for res in result
  ;; # 					if (eq 'image/png (car res))
  ;; # 					collect (ob-ijulia-inline-image (cdr res)))
  ;; # 				  "\n")))
  ;; # 	    (ob-ijulia--create-stdout-buffer output)
  ;; # 	    (cond ((and file (string= (f-ext file) "png"))
  ;; # 		   (->> result (assoc 'image/png) cdr (ob-ijulia--write-base64-string file)))
  ;; # 		  ((and file (string= (f-ext file) "svg"))
  ;; # 		   (->> result (assoc 'image/svg+xml) cdr (ob-ijulia--write-string-to-file file)))
  ;; # 		  (file (error "%s is currently an unsupported file extension." (f-ext file)))
  ;; # 		  (t (->> result (assoc 'text/plain) cdr))))))))
#+end_src

#+RESULTS:
: org-babel-execute:ijulia

***** LaTeX Markdown preview
#+begin_src emacs-lisp
  (use-package latex-math-preview)
  #+end_src

  #+RESULTS:

  # (use-package markdown-preview-mode)
**** Anaconda-mode and Elpy and Jedi
***** Jedi
#+begin_src emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
  (use-package lsp-jedi)
  (use-package jedi-core)
  (use-package company-jedi)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package elpy
      :init
      (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
      :bind (:map elpy-mode-map
		("<M-left>" . nil)
		("<M-right>" . nil)
		("<M-S-left>" . elpy-nav-indent-shift-left)
		("<M-S-right>" . elpy-nav-indent-shift-right)
		("M-." . elpy-goto-definition)
		("M-," . pop-tag-mark))
      :config
      (setq elpy-rpc-backend "jedi"))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package anaconda-mode)
  (use-package company-anaconda)
  (use-package conda)
#+end_src

#+RESULTS:

**** Conda
The =conda-env-home-directory= and =custom-set-variables= are very specific to your OS install - even among linux package managers. Chances are this setup will work for you, if you used paur (AUR arch repository).
#+begin_src emacs-lisp
  (use-package conda)
  (setq 
   conda-env-home-directory (expand-file-name "~/.conda/") ;; as in previous example; not required
  conda-env-subdirectory "envs")
  (custom-set-variables '(conda-anaconda-home "/opt/anaconda/"))
  ;; if you want interactive shell support, include:
  (conda-env-initialize-interactive-shells)
  ;; if you want eshell support, include:
  (conda-env-initialize-eshell)
  ;; if you want auto-activation (see below for details), include:
  (conda-env-autoactivate-mode t)
#+end_src

#+RESULTS:
: t

*** HTML/CSS
#+begin_src emacs-lisp
  (use-package css-mode
    :bind ("C-c m" . css-lookup-symbol))
#+end_src

#+RESULTS:
: css-lookup-symbol

*** Ditaa
#+begin_src emacs-lisp
  ;; (use-package artist-mode)
#+end_src

#+RESULTS:
: t

*** JavaScript
**** Indium
#+begin_src emacs-lisp
  (use-package indium
  :hook (js-mode . indium-interaction-mode))
#+end_src

#+RESULTS:
| indium-interaction-mode | js2-minor-mode |

**** Beautify

#+begin_src emacs-lisp
  (use-package web-beautify
    :hook ((css-mode . web-beautify-css)
           ;; (js-mode . web-beautify-js)
           (html-mode . web-beautify-html)))
#+end_src

#+RESULTS:
| web-beautify-html |

**** Json
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
#+end_src

**** js2-mode
#+begin_src emacs-lisp
  (use-package js2-mode
    :hook ((js-mode . js2-minor-mode)
           (js2-mode . ac-js2-mode)))
#+end_src

#+RESULTS:
| ac-js2-mode | web-beautify-js | evil-collection-js2-set-evil-shift-width |

**** Tern
#+begin_src emacs-lisp
  (use-package tern
    :load-path "~/.emacs.d/tern/"
    :after ((js-mode)
            (js2-mode))
    :hook ((js-mode . tern-mode)
           (js2-mode . tern-mode))
    :config (autoload 'tern-mode "tern.el" nil t))
#+end_src

#+RESULTS:

**** RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :mode "\\.js\\'")
#+end_src

**** Tide
#+begin_src emacs-lisp
  (defun setup-tide-node()
    "Setup function for tide."
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save-mode-enabled))
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package tide
    :ensure t
    :after (rjsx-mode company flycheck)
    :hook (rjsx-mode . setup-tide-mode))
#+end_src

**** snippet
#+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (add-hook 'typescript-mode-hook 'flycheck-mode)
      :init
      (global-flycheck-mode t))
  
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))
  
    (use-package company
      :ensure t
      :config
      (setq company-show-numbers t)
      (setq company-tooltip-align-annotations t)
      ;; invert the navigation direction if the the completion popup-isearch-match
      ;; is displayed on top (happens near the bottom of windows)
      (setq company-tooltip-flip-when-above t)
      (global-company-mode))
  
    (use-package company-quickhelp
      :ensure t
      :init
      (company-quickhelp-mode 1)
      (use-package pos-tip
        :ensure t))
  
    (use-package web-mode
      :ensure t
      :mode (("\\.html?\\'" . web-mode)
             ("\\.tsx\\'" . web-mode)
             ("\\.jsx\\'" . web-mode))
      :config
      (setq web-mode-markup-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-block-padding 2
            web-mode-comment-style 2
  
            web-mode-enable-css-colorization t
            web-mode-enable-auto-pairing t
            web-mode-enable-comment-keywords t
            web-mode-enable-current-element-highlight t
            web-mode-enable-auto-indentation nil
            )
      (add-hook 'web-mode-hook
                (lambda ()
                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                    (setup-tide-mode))))
      ;; enable typescript-tslint checker
      (flycheck-add-mode 'typescript-tslint 'web-mode))
  
    (use-package typescript-mode
      :ensure t
      :config
      (setq typescript-indent-level 2)
      (add-hook 'typescript-mode #'subword-mode))
  
    (use-package tide
      :init
      :ensure t
      :after (typescript-mode company flycheck)
      :hook ((typescript-mode . tide-setup)
             (typescript-mode . tide-hl-identifier-mode)))
  
    (use-package css-mode
      :config
    (setq css-indent-offset 2))
#+end_src

#+RESULTS:
: t

*** Prettier
#+begin_src emacs-lisp
  (use-package prettier-js
  :ensure t
  :after (rjsx-mode)
  :hook (rjsx-mode . prettier-js-mode))
#+end_src

*** Racket

#+RESULTS:
: racket-insert-lambda
# **** Scheme default
# #+begin_src emacs-lisp
# (setq scheme-program-name "guile")
#+end_src

# #+RESULTS:
# : guile

# **** Quack
# #+RESULTS:
# #+begin_src emacs-lisp
#   (use-package quack
#     :after racket-mode
#     :hook (racket-mode . quack-mode))
# #+end_src

# #+RESULTS:
# | quack-mode | paredit-mode |

#+RESULTS:
| evil-smartparens-mode | smartparens-mode | scribble-mode | geiser-mode | paredit-mode | quack-mode |

# **** Geiser
#+begin_src emacs-lisp
  ;; (use-package geiser
    ;; :after racket-mode
    ;; :hook (racket-mode . geiser-mode))
#+end_src

#+RESULTS:
# | geiser-mode | paredit-mode | quack-mode |

# **** Scribble Mode
# #+begin_src emacs-lisp
# (use-package scribble-mode
#     :after racket-mode
#     :hook (racket-mode . scribble-mode))
# #+end_src

#+RESULTS:
# | scribble-mode | geiser-mode | paredit-mode | quack-mode |

**** Racket mode
#+begin_src emacs-lisp
  (use-package racket-mode
    :bind ("C-c l" . racket-insert-lambda)
    :config
    (when (racket-mode)
      (exec-path-from-shell-initialize)))
#+end_src
**** Paredit

#+begin_src emacs-lisp
  (use-package paredit)
    ;; :hook (prog-mode . paredit-mode))
    ;; :hook (prog-mode . paredit-mode))
  
  (use-package evil-paredit)
    ;; :hook prog-mode)
    ;; :hook (prog-mode . paredit-mode))
#+end_src

#+RESULTS:

**** Parens
#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :hook ((emacs-lisp-mode . smartparens-mode)
  ;;          (lisp-mode . smartparens-mode)
  ;;          (cider-mode . smartparens-mode)
  ;;          (clojure-mode . smartparens-mode)
  ;;          (racket-mode . smartparens-mode)))
#+end_src

#+RESULTS:
| smartparens-mode | paredit-mode | evil-smartparens-mode |

#+begin_src emacs-lisp
  (use-package evil-smartparens
    :hook ((after-init . evil-smartparens-mode)
	   (prog-mode . evil-smartparens-mode)
	   (text-mode . evil-smartparens-mode)
	   (special-mode . evil-smartparens-mode)))
#+end_src

#+RESULTS:
*** Common lisp
#+begin_src emacs-lisp
  (use-package slime
    :config
    (setq inferior-lisp-program "sbcl"))
  (use-package ac-slime)
  (use-package slime-company)
#+end_src

#+RESULTS:

# *** swank-js
#+begin_src emacs-lisp
  (global-set-key [f5] 'slime-js-reload)
  (add-hook 'js2-mode-hook
            (lambda ()
              (slime-js-minor-mode 1)))

 (add-hook 'css-mode-hook
           (lambda ()
             (define-key css-mode-map "\M-\C-x" 'slime-js-refresh-css)
             (define-key css-mode-map "\C-c\C-r" 'slime-js-embed-css)))
#+end_src

#+RESULTS:
| (lambda nil (define-key css-mode-map \230 'slime-js-refresh-css) (define-key css-mode-map  'slime-js-embed-css)) | emmet-mode | web-beautify-css |
*** Clojure(Script)
**** Cider
#+begin_src emacs-lisp
  (use-package cider
    ;; :mode "\\.clj[sc]?\\'"
    :config
    (evil-collection-cider-setup)
    (setq cider-font-lock-dinamically '(macro core fucntion var))
    (setq cider-reader-conditional-face t))
#+end_src
**** Clojure mode and hooks
#+begin_src emacs-lisp
    (use-package clojure-mode)
  ;; (put '>defn 'clojure-doc-string-elt 2)
      ;;    (use-package clojure-mode-extra-font-locking
      ;;      :hook (clojure-mode . clojure-mode-extra-font-locking))
      ;; (use-package sotclojure
      ;;   :hook ((clojure-mode . sotclojure-mode)
      ;; 	     (cider-mode .sotclojure-mode)))
      ;; (use-package helm-clojuredocs
      ;;   :hook ((clojure-mode . helm-clojuredocs-mode)
      ;; 	     (cider-mode .sotclojure-mode)))
      ;; (use-package ivy-clojuredocs
      ;;   :hook ((clojure-mode . ivy-clojuredocs-mode)
      ;; 	     (cider-mode .sotclojure-mode)))
      ;; (use-package flycheck-clojure
      ;;   :hook ((clojure-mode . flycheck-mode)
      ;; 	     (cider-mode .sotclojure-mode)))
  
    ;;   (use-package clojure-snippets
    ;;     :hook ((clojure-mode . clojure-snippets-mode)
    ;;            (cider-mode .sotclojure-mode)))
    ;; ;; (use-package clojure-essential-ref
    ;;   :hook ((clojure-mode . clojure-essential-ref-mode)
    ;;          (cider-mode .sotclojure-mode)))
    ;; (use-package 4clojure
    ;;     :hook ((clojure-mode . 4clojure-mode)
    ;;            (cider-mode .sotclojure-mode)))
      ;; (use-package clojure-extra-font-locking
	;; :hook (clojure-mode . clojure-extra-font-locking-mode))
#+end_src
*** Julia
    #+begin_src emacs-lisp
(use-package lsp-julia)
    #+end_src

    #+begin_src emacs-lisp
      (use-package julia-shell)
      (use-package julia-vterm)
      (use-package julia-snail)
      (use-package flycheck-julia)
      (use-package ob-ess-julia)
      (use-package ob-julia-vterm)
      (use-package julia-repl)
      #+end_src

      #+RESULTS:

    #+begin_src julia
      add "BSON", "Calculus","CategoricalArrays","Clustering", "Combinatorics", "CSV", "DataFrames", "DataStructures", "DecisionTree","DifferentialEquations", "Distributions", "Flux","GLM", "HCubature", "HypothesisTests", "HTTP","IJulia","Images","JSON","KernelDensity","Lasso","LaTeXStrings", "LIBSVM","LightGraphs","Measures", "MLDatasets", "MultivariateStats","NLsolve","Plots","PyCall","PyPlot","QuadGK","RCall","RDatasets","Roots","SpecialFunctions","StatsBase","StatsPlots","TimeSeries","AutoGrad","BayesNets","Bootstrap", "Distances", "FastGaussQuadrature", "Plotly","ScikitLearn"
    #+end_src

    #+RESULTS:

* Terminals
** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

Import bash alias into eshell
#+begin_src emacs-lisp
    (use-package load-bash-alias
      :hook (eshell-mode . load-bash-alias))
  #+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Applications

** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src conf :tangle no :noweb yes

  value=<<the-value()>>

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* Navigation
** DONE Ace-link
CLOSED: [2021-04-03 Sat 15:32]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-03 Sat 15:32]
:END:
Ace-link provides easy of navigation inside emacs self-hyperlinks or ad-hoc ones.
#+begin_src emacs-lisp
  (use-package ace-link)
  (ace-link-setup-default)

  (define-key org-mode-map (kbd "ö") 'ace-link-org)
#+end_src

#+RESULTS:
: ace-link-org

- ö = (AltGr-p)




# ** Keybinds
# Change ISO_Level3_Shift for <f2> <=> 96  F12
# Change 134 Super_R for Meta

# keycode 133 = Super_L NoSymbol Super_L => Emacs's Meta

# 108 ISO_Level3_Shift
# 134 Super_R
# 135 Super_R
# 105 Control_R
# 62  Shift_R
# keycode 108 = ISO_Level3_Shift NoSymbol ISO_Level3_Shift
# keycode 134 = Super_R NoSymbol Super_R
# keycode 135 = Super_R NoSymbol Super_R

*** Fs
67  F1
68  F2
69  F3
70  F4
71  F5
72  F6
73  F7
74  F8
75  F9
76  F10
95  F11
96  F12

