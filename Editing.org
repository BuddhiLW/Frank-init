#+title: Editing capabilities in Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./editing.el


* Auto tangle on save
#+begin_src emacs-lisp :tangle no
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

#+RESULTS:

* Flycheck (spelling checker)
** Some keybindings around <f8>
   #+begin_src emacs-lisp
     ;;; package --- quick flyspell functionality.
     ;;; Commentary:
     ;; Easy spell checking; one can activate diverse capabilites of
     ;; flycheck through <f8>-key combinations
     ;;; Code:
     (global-set-key (kbd "<f8>") 'ispell-word)
     (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
     (global-set-key (kbd "C-s-<f8>") 'flyspell-buffer)
     (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
     (defun flyspell-check-next-highlighted-word ()
       "Custom function to spell check next highlighted word."
       (interactive)
       (flyspell-goto-next-error)
       (ispell-word)
       )
     (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
     
     (provide 'flycheck)
     ;;; flycheck-<f8> ends here
   #+end_src

   #+RESULTS:
   : flyspell-check-next-highlighted-word

** <f6> - cycling through languages
   #+begin_src emacs-lisp
    (let ((langs '("american" "francais" "brasileiro")))
      (setq lang-ring (make-ring (length langs)))
      (dolist (elem langs) (ring-insert lang-ring elem)))
   #+end_src

   #+RESULTS:

   #+begin_src emacs-lisp
     (defun cycle-ispell-languages ()
	(interactive)
	(let ((lang (ring-ref lang-ring -1)))
	  (ring-insert lang-ring lang)
	  (ispell-change-dictionary lang)))
   #+end_src

   #+RESULTS:
   : cycle-ispell-languages

   #+begin_src emacs-lisp
     (global-set-key [f6] 'cycle-ispell-languages)
   #+end_src

* Rainbow-mode
  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook ((special-mode . rainbow-delimiters-mode)
	     (text-mode . rainbow-delimiters-mode)
	     (prog-mode . rainbow-delimiters-mode)))
  #+end_src

    #+RESULTS:

* DONE Parenthesis
  CLOSED: [2021-06-22 Tue 15:21] DEADLINE: <2021-06-20 Sun> SCHEDULED: <2021-06-17 Thu>
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-06-22 Tue 15:21]
:END:
Move configuration on Emacs.org to here.

**** Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
  ;;          (lisp-mode . smartparens-mode)
  ;;          (cider-mode . smartparens-mode)
  ;;          (clojure-mode . smartparens-mode)
  ;;          (racket-mode . smartparens-mode)))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package evil-smartparens
    :hook ((after-init . evil-smartparens-mode)
	   (prog-mode . evil-smartparens-mode)
	   (text-mode . evil-smartparens-mode)
	   (special-mode . evil-smartparens-mode)))
#+end_src

#+RESULTS:
* Indent Guide
  #+begin_src emacs-lisp
    (use-package indent-guide
      :init (indent-guide-global-mode t)
      :hook (prog-mode . indent-guide-mode))
  #+end_src

    #+RESULTS:

* Autocomplete
  #+begin_src emacs-lisp
    (use-package auto-complete
      :hook ((  )
	     (prog-mode . auto-complete-mode)))
    
    #+end_src

* Yasnippets
  #+begin_src emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (yas-global-mode 1))
    (use-package yasnippet-snippets)
    (use-package yasnippet-classic-snippets)
    #+end_src

    #+RESULTS:

* Language-specific
** LaTeX
*** AUCTeX
   #+begin_src emacs-lisp
     (use-package auctex
       :ensure tex-mode
       :hook (tex-mode . auctex-mode))
     #+end_src

     #+RESULTS:
*** LaTeX Extra features for editing
    #+begin_src emacs-lisp
      (use-package latex-extra)
      #+end_src

      #+RESULTS:
* Outshine - Org-folding for non-Org buffers
#+begin_src emacs-lisp
  (use-package outshine
    :hook ((outline-minor-mode-hook . outshine-mode)
	   (prog-mode . outshine-mode)))
  #+end_src

  #+RESULTS:
* Org-roam
** Requeriments for smooth run
*** org-ref, bibtex related pkgs.
    #+begin_src emacs-lisp
      (use-package org-ref)
      (use-package bibtex-utils)
      (use-package company-bibtex)
      (use-package gscholar-bibtex)
      (use-package helm-bibtex)
      (use-package org-roam-bibtex)
    #+end_src
    
  #+begin_src emacs-lisp
    (use-package org-roam
      :init
      (add-hook 'after-init-hook 'org-roam-mode))
    #+end_src
* TODO Unicode abreviation alias and setup
SCHEDULED: <2021-06-25 Fri>
#+begin_src emacs-lisp
;; (define-key key-translation-map (kbd "<tab> p") (kbd "φ"))
(define-key key-translation-map (kbd "<f9> x") (kbd "ξ"))
(define-key key-translation-map (kbd "<f9> i") (kbd "∞"))
(define-key key-translation-map (kbd "<f9> <right>") (kbd "→"))
#+end_src

#+RESULTS:
: [8594]
* Evil-mode related
** Evil-org
#+begin_src emacs-lisp
  (use-package org-evil)
  #+end_src

  #+RESULTS:
