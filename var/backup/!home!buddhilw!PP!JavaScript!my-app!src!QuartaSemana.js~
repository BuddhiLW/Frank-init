function main() {
    listaArray = [];

}

listaArray.length;
listaArray.push("last-nova-entrada");

var ValueAccumulator = function() {
    var values = [];
    var accumulate = function(obj) {
        if (obj) {
            values.push(obj);
            return values;
        }
        else {
            return values;
        }
    };
    return accumulate;
};

var bib = ValueAccumulator();
bib(1);
bib("primeiro número?");
console.log(bib());

main();

// Faça os exercícios abaixo sem utilizar funções prontas de array.
  // As únicas propriedades de array que você deve usar são o .length e o .push().

  // Ao final, responda o formulário a seguir: https://respondea.typeform.com/to/m1MxT1qk

  // Escreva uma função que retorne o tamanho da array
  // Exemplo: dada a array ['a','b','c'] deve retornar 3
  export function tamanhoDaArray(lista) {
      return lista.length;
  }

  // Escreva uma função que retorne o último elemento da array
  // Exemplo: dada a array ['a','b','c'] deve retornar 'c'
var length = a => a.length;
var position = a => p => a[p];
var last = a => position(a)(length(a)-1);
// var retornaUltimo = last;

export function retornaUltimo(lista){
    return last(lista);
};
// Escreva uma função que retorne o elemento no meio da array
// Exemplo: dada a array [1, 2, 3, 4, 5], deve retornar 3
// Se o número de elementos for par, dos dois elementos centralizados, deve retornar o mais à esquerda
  // Exemplo: dada a array [1, 2, 3, 4], deve retornar 2
  // Dica: pesquise pela função Math.floor
  export function retornaMeio(lista) {}

  // Escreva uma função que receba uma lista de números
  // e retorne uma nova array contendo os números multiplicados por 2
  // Exemplo: Dada a array [1,2,3,4] deve retornar [2,4,6,8]
  export function retornaDobro(lista) {}

  // Escreva uma função que, dada uma array, retorne uma nova array
  // contendo somente os elementos da array original que estavam em índices ímpares.
  // Exemplo: ['a','b','c','d'] deve retornar ['b','d']
  export function elementosImpares(lista) {}

  // Escreva uma função que, dada uma array, retorne a soma de todos os seus elementos
  // Exemplo: Dada a array [1,2,3] deve retornar 6
  export function somaArray(lista) {}

  // Escreva uma função que procure um elemento dentro de uma array
  // e retorne o índice da primeira ocorrência desse elemento.
  // Exemplo: procurar 'x' em ['a','x','c','x'] deve retornar 1.
  // Se o valor não for encontrado, deve retornar null.
  // Não utilize funções prontas (como indexOf)
  export function encontraIndice(lista, elemento) {}

  // Escreva uma função que retorne o maior número de uma array
  // Exemplo: Dada a array [2,5,10,3] deve retornar 10
  export function maiorNumero(lista) {}

  // Escreva uma função que inverta uma array.
  // Exemplo: [1,2,3] vira [3,2,1]
  // Não utilize funções prontas (como reverse)
  export function inverterArray(lista) {}

  // Escreva uma função que retorne 1 caso o texto fornecido seja um palíndromo ou 0 caso contrário.
  // Ser palíndromo significa que o texto escrito de traz pra frente é igual ao texto original. Exemplo: 'ana' é um palíndromo
  // Dica: assim como em arrays, você pode acessar o caracter de uma string a partir do seu índice, por exemplo: 'abcd'[1] te dará 'b'
  export function ehPalindromo(texto) {}

  // Utilizando loops, escreva uma função que concatene duas arrays em uma só
  // Exemplo: dadas as arrays [a,b,c] e [1,2,3], retorna [a,b,c,1,2,3]
  // Não utilize funções prontas (como concat)
  export function concatenarArrays(lista1, lista2) {}

  /*
   *
   *
   ********* BÔNUS *********
   *
   *
   *
   */

  // Escreva uma função que combine duas arrays de forma alternada
  // Exemplo: dadas as arrays [a,b,c] e [1,2,3] retorne [a,1,b,2,c,3].
  // Caso as arrays sejam de tamanhos diferentes, a função deve se comportar
  // da seguinte forma: dadas arrays [a,b,c,d,e] e [1,2,3], retorne [a,1,b,2,c,3,d,e].
  export function concatenarArraysAlternado(lista1, lista2) {}

  // Escreva uma função que combine duas arrays que já estão ordenadas
  // em uma única array ordenada.
  // Exemplo: [1,4,6],[2,3,5] → [1,2,3,4,5,6]
  export function concatenarArraysOrdenadas(lista1, lista2) {}

  // Escreva uma função que rotacione uma array k vezes
  // Exemplo: [1,2,3,4,5,6] rotacionada por 2 vira [3,4,5,6,1,2]
  // Caso k seja um número negativo, rotacione para o sentido oposto: [1,2,3,4,5,6] rotacionada por -2 vira [5,6,1,2,3,4]
  export function rotacionarArray(lista, k) {}

// Escreva uma função que retorne o último elemento da array
// Exemplo: dada a array ['a','b','c'] deve retornar 'c'
var length = a => a.length;
var position = a => p => a[p];
var last = a => position(a)(length(a)-1);

export function retornaUltimo(lista){
    return last(lista);
};

/* We see the patten inside .forEach 
var oddArray = a => {let newA = [];
                     a.forEach((e,i) => oddP(i)
                               ? λpush(newA)(e)
                               : "unwanted/misfits of society");
                     return newA;
                    };
var doubleArray = a => {let newA =[];
                        a.forEach(e => λpush(newA)(λdouble(e)));
                        return newA;
                       };
*/

// As it's common to use apply operations on an array and return a new one,
// let's define an operation to do that
var λmap = a => f => {let newA = [];
                      a.forEach(f);
                      retun newA;
                     };

var evenP = e => (e % 2  === 0);
var middleEven = a => position(a)(length(a)/2 - 1);
var middleOdd = a => position(a)(length(a)/2 - 0.5);
var middle = a => (evenP(length(a))
                   ? middleEven(a)
                   : middleOdd(a));

function retornaMeio(lista) {
    return middle(lista);
}

var λdouble = e => 2 * e;
var λpush = a => e => a.push(e);
var doubleArray = a => {let newA =[];
                        a.forEach(e => λpush(newA)(λdouble(e)));
                        return newA;
                       };
export function returnDobro(lista){
    return doubleArray(lista);
}

var λnot = p => (p === true ? false : true);
var oddP = e => λnot(evenP(e));

var oddArray = a => {let newA = [];
                     a.forEach((e,i) => oddP(i)
                               ? λpush(newA)(e)
                               : "unwanted/misfits of society");
                     return newA;
                    };
export function elementosImpares(lista) {
    oddArray(lista);
}

var accumulate = accum => e => accum += e;
var sum = a => {let accum = 0;
                a.forEach(e => accumulate(accum)(e));
                return accum;
               };
