#+AUTHOR: BuddhiLW
#+STARTUP: latexpreview
#+PROPERTY: header-args:js :tangle ./src/FPinJS.js :mkdirp yes

#+begin_src js
  #   var
  #   obj1 = {value: 1},
  #   obj2 = {value: 2},
  #   obj3 = {value: 3};
#+end_src

 #+begin_src js
    let obj1 = [1,2];
    let obj2 = "yes";
    let obj3 = true;

    var accumulate = obj => (obj 
                             ? () => {values.push(obj);
                                      return values;} 
                             :() => {return values;});

    // var accumulate = function(obj) {
    //     if (obj) {
    //         values.push(obj.value);
    //         return values;
    //     }
    //     else {
    //         return values;
    //     }
    // };

    var ValueAccumulator = function() {
        var values = [];
        return accumulate;
    };
    //This allows us to do this:
    var accumulator = ValueAccumulator();
    accumulator(obj1);
    accumulator(obj2);
    accumulator(obj3);
    console.log(accumulator());
    // Output: [obj1.value, obj2.value]
#+end_src

#+begin_src js :tangle ../js/.js
  // Refatore a função a seguir para usar um ternário no lugar dos ifs
  function maiorOuMenor(a, b) {
    if (a > b) {
      return "a maior que b";
    } else {
      return "a menor ou igual a b";
    }
  }

  // Sem usar ifs, implemente a função para retornar "par" se o argumento for par e "impar" caso contrário
  function parOuImpar(num) {}

  // Refatore a função a seguir para usar dois ternários no lugar dos ifs.
  function maiorMenorOuIgual(a, b) {
    if (a > b) {
      return "a maior que b";
    } else if (a < b) {
      return "a menor que b";
    } else {
      return "a igual a b";
    }
  }

  // A função a seguir recebe a hora do dia, de 9 até 23.
  // Sem usar if, faça com que retorne "bom dia" (9 à 11, inclusive), "boa tarde" (12 às 17, inclusive) ou "boa noite" de acordo com a hora recebida.
  function bomDiaBoaTardeBoaNoite(hora) {}

  // Refatore a função a seguir, mantendo seu comportamento porém SEM usar if NEM operador ternário. Utilize a técnica de Short Circuit
  function ondeEntregar(enderecoFornecido) {
    if (enderecoFornecido) {
      return enderecoFornecido;
    } else {
      return "Agência local";
    }
  }

  // A função a seguir recebe id e um email, porém o id pode ser null.
  // Usando Short Circuit, implemente de forma que a função retorne o id caso seja diferente de null ou o email caso contrário
  function identificador(id, email) {}

  // A função a seguir recebe possíveis nomes para um usuário, mas todos eles podem vir com valor falsy.
  // Sem usar if, escreva a função para que retorne o nome do usuário na ordem de preferência:
  // primeiroNome se tiver, segundoNome se tiver, apelido se tiver ou, por fim, "Anônimo".
  // Ex.: Se primeiroNome é undefined, segundoNome é undefined, apelido é "gatinho23", então a função retorna "gatinho23".
  function nomeDoUsuario(primeiroNome, segundoNome, apelido) {}

  // A função a seguir recebe um usuário e retorna seu nome ou então retorna undefined caso o usuário seja undefined.
  // Formato do objeto usuario: { id: 1, nome: 'Fulano de Tal' }
  // Refatore a função para usar a técnica de Short Circuit no lugar do if.
  function nomeDoUsuarioSeExiste(usuario) {
    if (usuario) {
      return usuario.nome;
    }
  }

  // A função a seguir recebe um objeto representando um produto e retorna seu preço.
  // Porém, esse produto pode ser passado como undefined pra função, gerando um bug.
  // Utilizando short circuit, refatore a função pra passar a retornar undefined nesse caso.
  // Formato do produto recebido: { nome: 'TV 32 polegadas', preco: 1200 }
  function precoDoProduto(produto) {
    return produto.preco;
  }

  // A função a seguir recebe uma lista de números e os soma. Refatore usando forEach
  function soma(numeros) {
    let somatorio = 0;
    for (let i = 0; i < numeros.length; i++) {
      let num = numeros[i];
      somatorio += num;
    }

    return somatorio;
  }

  // Usando forEach, implemente a funçao abaixo que deve receber uma lista de numeros e retornar a multiplicacao entre deles
  function produto(numeros) {}

  // Usando forEach, implemente a função abaixo que deve receber uma lista de numeros e retornar qual deles é o maior
  function max(numeros) {}

  // A função a seguir recebe uma array com objetos no formato
  // { nome: 'TV 32 polegadas', preco: 1200 }
  // E retorna uma array com os precos.
  // Por exemplo, para a entrada
  // [ {nome: 'TV', preco: 1200 }, { nome: 'Computador', preco: 6000 }]
  // retorna a array
  // [1200, 6000]
  // Refatore a função para usar map ao invés do for
  function precos(produtos) {
    let precos = [];

    for (let i = 0; i < produtos.length; i++) {
      const prod = produtos[i];
      precos.push(prod.preco);
    }

    return precos;
  }

  // A função a seguir recebe uma array com outra array dentro em que o primeiro indice representa o nome de um usuario e o segundo o seu email.
  // Por exemplo, para a entrada
  // [['Fulano', 'fulano@email.com'], ['Beltrano', 'beltrano@email.com']]
  // deve retornar a array
  // [{ nome: 'Fulano', email: 'fulano@email.com' }, { nome: 'Beltrano', email: 'beltrano@email.com' }]
  // Use map para retornar uma array no formato acima.
  function converterParaObjeto(usuarios) {}

  // A função a seguir recebe uma array e um item. Use filter para remover os elementos que forem iguais ao item.
  // Ex.: passando a array ['abc', 'def', 'ghi'] e o item 'def' => ['abc', 'ghi']
  function removeTodosOsItensSeIgual(arr, item) {}

  // A função a seguir recebe uma array de produtos representados por objetos na forma
  // { nome: 'geladeira', preco: 1220 }
  // Tanto nome, quanto preco podem vir falsy. Sem usar for, implemente a função limparProdutos para só retornar os itens que têm "nome" E "preco" com valores válidos.
  function limparProdutos(produtos) {}

  // A função a seguir recebe uma array de palavras. Sem usar for, faça com
  // que a função remova palavras duplicadas, ficando somente a primeira ocorrência.
  // Ex.: ['a', 'minha', 'casa', 'é', 'uma', 'casa', 'antiga'] => ['a', 'minha', 'casa', 'é', 'uma', 'antiga']
  function filtrarUnica(arr) {}

  // A função a seguir recebe uma array que pode conter os dias da semana na forma:
  // segunda, terça, quarta, quinta, sexta
  // Usando map e ternario faça com que a função retorne rosa se for quarta ou branco se
  // for qualquer outro dia
  function corDaRoupaParaDiaDaSemana(diasDaSemana) {}

  // A função a seguir recebe uma array e retorna outra array com os números pares multiplicados por dois.
  // Refatore a função para usar um filter seguido de um map para fazer a mesma lógica
  function duplicarPares(arr) {
    const arrayPares = [];

    for (let i = 0; i < arr.length; i++) {
      const num = arr[i];

      if (num % 2 === 0) {
        arrayPares.push(num * 2);
      }
    }

    return arrayPares;
  }

  // Deseja-se saber a partir de uma lista de convidados, os nomes daqueles que podem consumir alcool para dar uma pulseira diferenciada.
  // A funcao a seguir recebe uma lista de convidados representados por objetos na forma
  // { nome: "Fulano de Tal", idade: 22 }
  // Por exemplo, para a entrada
  // [{ nome: 'Fulano', idade: 22 }, { nome: 'Beltrano', idade: 16 }]
  // deve retornar a array
  // ['Fulano']
  // Sem usar for ou forEach, implemente a função conforme especificada acima.
  function nomesDosMaioresDeIdade(convidados) {}

#+end_src
