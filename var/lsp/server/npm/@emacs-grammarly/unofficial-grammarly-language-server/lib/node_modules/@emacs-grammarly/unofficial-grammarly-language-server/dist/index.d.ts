import { RequestType, RequestType0 } from 'vscode-jsonrpc';
import { OutcomeScoresWithPlagiarism, Emotion, TextInfoEvent, Event, IdAlert } from '@emacs-grammarly/unofficial-grammarly-api';

declare type CheckHostStatus = 'CHECKING' | 'IDLE';

interface AuthParams {
    username: string;
    password: string;
}

declare namespace GrammarlyLanguageServer {
    type DocumentState = {
        uri: string;
        status: CheckHostStatus;
        score: number;
        scores: Partial<OutcomeScoresWithPlagiarism>;
        emotions: Emotion[];
        textInfo: Omit<TextInfoEvent, keyof Event> | null;
        totalAlertsCount: number;
        additionalFixableAlertsCount: number;
        premiumAlertsCount: number;
        user: {
            isAnonymous: boolean;
            isPremium: boolean;
            username: string;
        };
    } | {
        uri: string;
    };
    interface DocumentRef {
        uri: string;
    }
    interface FeedbackAcceptAlert extends DocumentRef {
        id: IdAlert;
        text: string;
    }
    interface FeedbackDismissAlert extends DocumentRef {
        id: IdAlert;
    }
    interface FeedbackAddToDictionary extends DocumentRef {
        id: IdAlert;
    }
    const Feature: {
        stop: RequestType<DocumentRef, void, Error, never>;
        checkGrammar: RequestType<DocumentRef, void, Error, never>;
        acceptAlert: RequestType<FeedbackAcceptAlert, void, Error, never>;
        dismissAlert: RequestType<FeedbackDismissAlert, void, Error, never>;
        addToDictionary: RequestType<FeedbackAddToDictionary, void, Error, never>;
        getDocumentState: RequestType<DocumentRef, {
            uri: string;
            status: CheckHostStatus;
            score: number;
            scores: Partial<OutcomeScoresWithPlagiarism>;
            emotions: Emotion[];
            textInfo: Omit<TextInfoEvent, keyof Event> | null;
            totalAlertsCount: number;
            additionalFixableAlertsCount: number;
            premiumAlertsCount: number;
            user: {
                isAnonymous: boolean;
                isPremium: boolean;
                username: string;
            };
        } | {
            uri: string;
        } | null, Error, never>;
    };
    namespace Client {
        const Feature: {
            getCredentials: RequestType0<AuthParams, Error, never>;
            getToken: RequestType0<{
                token: string;
            } | null, Error, never>;
            storeToken: RequestType<{
                token: string;
            }, void, Error, never>;
            showError: RequestType<{
                message: string;
                buttons: string[];
            }, string | null, Error, never>;
            updateDocumentState: RequestType<DocumentState, void, Error, never>;
        };
    }
}

declare function startLanguageServer(): void;

export { GrammarlyLanguageServer, startLanguageServer };
